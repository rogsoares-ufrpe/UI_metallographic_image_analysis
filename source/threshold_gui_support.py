#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.1
#  in conjunction with Tcl version 8.6
#    May 29, 2020 08:42:08 PM -03  platform: Windows NT
#    May 29, 2020 09:22:43 PM -03  platform: Windows NT
#    May 29, 2020 09:29:26 PM -03  platform: Windows NT
#    May 29, 2020 09:36:20 PM -03  platform: Windows NT

import sys
import numpy as np
import cv2 as cv
import tkinter as tk
import matplotlib.pyplot as plt
from PIL import Image
from PIL import ImageTk


def set_Tk_var():
    global scalevar2
    scalevar2 = tk.IntVar()
    global scalevar1
    scalevar1 = tk.IntVar()
    
    global open_win_var
    open_win_var = tk.BooleanVar()
    
    
def init(root, gui, top, *args, **kwargs):
    
    global MainWindow, w, TopLevel
    
    MainWindow = root  # MainWindow app: is the parent
    w = gui            # gui window: child from MainWindow
    TopLevel = top     # TopLevel app: shapes gui window
    
    TopLevel.Scale_Threshold.set(0)
    TopLevel.Scale_Maxvalue.set(255)
    
    
    # tell MainWindow (TopLevel) it must be opened
    open_win_var.set(True)
    
    # define parameters
    global thresh, maxval
    thresh = int(0)
    maxval = int(255)
    
    # very if window is to be closed or not
    global isopened
    isopened = True    

def get_threshold(v):
    global thresh
    thresh = int(v)
    open_win_var.set(False)
    
    
def get_maxval(v):
    global maxval
    maxval = int(v)
    open_win_var.set(False)


def is_opened():
    # if Ok button was not pushed, set for another waiting moment to get values
    if isopened:
        open_win_var.set(True)
        
    return isopened

# an order to close the window
def stop_process():
    global isopened
    isopened = False
    open_win_var.set(False)
    

def get_parameters():
    """Hold on program while data is obtained."""
    MainWindow.wait_variable(open_win_var)
    return thresh, maxval


def create_histogram_plot(img):
    """A histogram of the gray image is plotted on canvas from the gui windows.
    It guides user chose the must suitable thresholded values"""
    
    hist_img = cv.calcHist([img],[0],None,[256],[0,256])
    # print(hist_img.shape)
    plt.plot(hist_img)
    
    plt.fill_between(np.arange(0, 256), hist_img[:,0])
    # plt.yscale('symlog')
    plt.xticks(np.arange(0, 256, step=25))
    plt.grid(True)
    plt.savefig("Graph", dpi=100)
    
    
    # print("Acumulado: %d - %d " % (np.sum(hist_img[0:150]), np.sum(hist_img[151:255])) )


def load_threshold_histogram():
    # set img as a global variable to not lose the image reference
    global img
    img = ImageTk.PhotoImage(Image.open("Graph.png"))
    TopLevel.Canvas.create_image(0, 0, anchor=tk.NW, image=img)
    
        
def destroy_window():
    # Function which closes the window.
    global w
    w.destroy()
    w = None
    TopLevel = None


if __name__ == '__main__':
    import threshold_gui
    threshold_gui.vp_start_gui()





