#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Oct 18, 2023 04:33:30 PM -03  platform: Windows NT

# self.edge_detection_var.set("Canny")
# self.meanSTD_var.set("1")
# self.rb_filter.set(1)
# self.drawcnt_var.set(1)

import inspect
import os
import cv2
import tkinter as tk
import numpy as np
import matplotlib.pyplot as plt
# import tkinter.ttk as ttk
# from tkinter.constants import *

from tkinter.messagebox import showerror, showwarning, showinfo

# from tabulate import tabulate
from prettytable import PrettyTable
from tkinter import filedialog as fd

import gui_main_2

import canvas_manager as canvasmanager
import media



# Import module to get scale hoving cursor on image
import ScaleWinDialog as swd

image_analyzer = media.MEDIA()    # object for Metallographic Image Analysis class


_debug = True # False to eliminate debug printing from callback functions.

def main(*args):
    '''Main entry point for the application.'''
    
    global gsp_old
    gsp_old = 0
    
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = gui_main_2.Toplevel_MainWindow(_top1)
    
    global cmanager
    cmanager = canvasmanager.CanvasManager(_w1.MainCanvas)
    
    
    _w1.MainCanvas.bind("<Motion>", lambda e: callback_movement(e))
    
    root.mainloop()
    
def callback_movement(event):
    """Captura as coordenadas do cursor sobre a tela de canvas"""
    
    x = (event.x-55)/image_analyzer.image_prop.ratio
    y = (event.y-55)/image_analyzer.image_prop.ratio
    str = "x = {:.2f}, y = {:.2f}".format(x,y)    
    _w1.Label_coords.config(text=str)
    
        
def open_segmentation_panel():
    
    global child
    child_root = tk.Toplevel(root)
    child = gui_main_2.TopLevel_SegmentationWindow(child_root)
    
    
def apply_procedure_button():

    print_message_on_TextBoard("Void function!")

def print_message_on_TextBoard(msg):
    # _w1.TextBox_output.tag_add("message", '10.10')
    _w1.TextBox_output.insert('end',msg+'\n', ("centered"))
    _w1.TextBox_output.tag_configure("centered", justify='center')

def print_table_on_TextBoard(title, header, rows):
    table = PrettyTable()
    table.title = title
    table.field_names = header
    table.add_rows(rows)
    table.align = "l"  
    _w1.TextBox_output.insert(tk.END, table)
    _w1.TextBox_output.insert('end','\n\n')
    
def apply_image_filter(the_filter):
    image_analyzer.set_image_filter(the_filter)
    image_analyzer.apply_filter_smooth_algorithms()
    
    fimg = image_analyzer.get_filtered_image()
    cimg = image_analyzer.set_image_for_canvas(fimg)    
    cmanager.display_image_on_canvas(cimg)


def select_filter():
    """Select image filter from VScale widget and then apply it to image.
    The filter can only be applied to a loaded image, otherwise warn user. """
    
    filter_name = ['None',
                   'Gaussian blur',
                   '2D convolution',
                   'Bilateral Filter',
                   'Median Blurring',
                   'Averaging',
                   'Laplacian']  
    
    i = int(child.rb_filter.get())
    
    print('filter name: ' + filter_name[i-1])
    
    if image_analyzer.is_image_loaded():
        apply_image_filter(filter_name[i-1])
    elif not(filter_name[i-1] == 'None'):
        print_message_on_TextBoard('Warning! Image file not loaded.')       

def select_structure_type():
    """Defines if the user wants to detect grain/porous structure or phases through
    the group of radio buttons. The action is performed pressing <detect structure>
    button."""
    
    if not image_analyzer.is_image_loaded():
        msg=[1,"No file has been openned!"]
        CHKMSG(msg)
    else:
    
        # Edge detection Procedure
        edp = child.edge_detection_var.get()
        
        # Control grains size area display
        gsp = int(child.meanSTD_var.get())
    
        
        # Canny
        if edp=="Canny":
            """Performe image segmentation finding grains' constours and updating canvas.
               Returns an error if image was not loaded.
            """
    
            if not image_analyzer.img_loaded:
                showerror('Grains segmentation','Image file has not been opened.')
            else:
                
                msg=image_analyzer.find_grains(gsp)
                CHKMSG(msg)
                
                
                #Convert grains areas in pixels to micrometers
                image_analyzer.convert_grains_pixel2micro()
               
                # after analysis, display report on text box
                title, header, rows_analysis = image_analyzer.get_report_analysis()            
                rows_imgprop = image_analyzer.image_prop.get_report_analysis()            
                rows = rows_analysis + rows_imgprop                      
                print_table_on_TextBoard(title, header, rows)           
                
            
                # setup canvas for image display
                setup_canvas()
                
                display_options()
                
                # set loaded image to be displayed on canvas
                cimg = image_analyzer.set_image_for_canvas(image_analyzer.image_cv)
                
                # cimg = image_analyzer.get_image_for_canvas()
                cmanager.display_image_on_canvas(cimg)  
                
                counts, bins = np.histogram(image_analyzer.grains_area)
                plt.hist(bins[:-1], bins, weights=counts)
                
                
        else:
            showerror('Error','Phases detection not implemented yet.')       

def display_options():
    """
    Manager how grains should be displayed. Options read from checkboxes
    """
    if child.colorfill_var.get()==1:
        image_analyzer.fill_contours()
    
    if child.drawcnt_var.get()==1:
        image_analyzer.draw_contours()
        
    if child.boundarybox_var.get()==1:
        image_analyzer.draw_bounding_box()
        
    if child.numberedgrains_var.get()==1:
        image_analyzer.numbering_grains()
        
    if child.minmax_var.get()==1:
        image_analyzer.draw_minmax_grains_area()
        
def select_procedure_type():
    """Defines which of the ASTM procedures to use"""
    var = child.rb_procedure_var.get()
    if var==1:
        print("Jeffries")
    elif var==2:
        print("Heyn")
    elif var==3:
        print("Hilliard")
    elif var==4:
        print("Abram")

def close_application(): 
    msg_box = tk.messagebox.askquestion('Exit Application', 
                                        'Are you sure you want to exit the application?',
                                        icon='warning')
    if msg_box == 'yes':
        root.destroy()
    
    
def open_image_file():
    
    filetypes = (
        ('Image file', '*.png *.jpg *jpeg'),
        ('HDF5', '*.hdf5'),
        ('All files', '*.*')
    )
    
    filename = fd.askopenfilename(
        title='Open a file',
        initialdir='/Users/roger/OneDrive/UFRPE/PESQUISA/Projeto - Analise de imagens metalograficas/Git/gui/UI_metallographic_image_analysis/images',
        filetypes=filetypes)

    if filename == '':        
        showinfo(title='Selected File',  
                 message="Nenhum arquivo aberto.")
    else:
        
        # load image file: it just creates a cv2 object
        image_analyzer.load_image(filename)
        
        # setup canvas for image display
        setup_canvas()
        
        # Display directory path and file name on MainWindow
        _w1.LabelDirectoryPathName.configure(text=filename)
        
        
def setup_canvas():
    # set loaded image to be displayed on canvas
    oimg = image_analyzer.get_image_original()
    
    # set loaded image to be displayed on canvas
    cimg = image_analyzer.set_image_for_canvas(oimg)
    
    # remove all previous graphics from previous image analysis
    cmanager.cleanup()
    
    # cimg = image_analyzer.get_image_for_canvas()
    cmanager.display_image_on_canvas(cimg)
    
    # set x-y scales on canvas 
    width, height = image_analyzer.get_image_dimensions() 
    cmanager.draw_xy_axis(width, height, image_analyzer.image_prop)    
    
        
def image_data_set():
    """Take parameters for correct analysis: Magnification, scale, units"""

    # read data from Scale Window Dialog
    scale_win = swd.SWD(root, _w1.MainCanvas)
    root.bind("<Motion>", lambda e: scale_win.callback_movement(e))
    root.bind("<Button-1>", lambda e: scale_win.callback_click(e))
    
    if _w1.Entry_magnification.get() == "":
        showwarning('Warning:','Image magnification unknow.')
        return 1
    
    # From scale window, get: 
    # 1. image magnification      (Entry box widget), 
    # 2. scale length             (pixels: from the red ruler plotted over drawing)
    # 3. scale taken from picture (micrometers: Entry box widget)
    magnification = float(_w1.Entry_magnification.get())
    
    scale_micrometers, scale_pixels = scale_win.get()    
    width, height = image_analyzer.get_image_dimensions()
    image_analyzer.image_prop.convertion_scale_settings(scale_micrometers, scale_pixels, magnification, width, height)
    
    # apague a marcação da régua usada para capturar a escala da imagem e
    # redesenhe os valores das escalas vertical e horizontal (pixel -> um)
    setup_canvas()
    
def zoom_image():
    """Abre uma janela para a visualização de uma área ampliada
       da imagem carregada
    """
    
    global child_zoom
    child_root = tk.Toplevel(root)
    child_zoom = gui_main_2.DisplayZoomWindow(child_root)
    
    img = image_analyzer.image_canvas
    
    resized_img = cv2.resize(img,None, fx=2, fy=2, interpolation=cv2.INTER_AREA)
    child_zoom.ZoomCanvas.create_image(0, 0, image=resized_img, anchor=tk.NW) 
    
       
def about():
    showinfo('About MEDIA:',
                    'The Metallographic Digital Image Analyzer:\n\n'
                    'Institution: UFRPE - UACSA\n'
                    'Author: Prof. Rogério Soares da Silva\n'
                    'e-mail: rogerio.soaress@ufrpe.br\n'
                    'Year  : 2023')
    
    
def getLineInfo():
    print("\nInspection")
    print("---------------------------------------------------------------------")
    print("File     : " + os.path.basename(inspect.stack()[1][1])  + 
          "\nLine     : " + str(inspect.stack()[1][2])+
          "\nFunction : " + inspect.stack()[1][3])
    print("---------------------------------------------------------------------\n\n")
    
def CHKMSG(msg):
    if len(msg):
       if msg[0]==1:
           showwarning("Warning",msg[1])
       elif msg[0]==-1:
           showerror("Fatal error",msg[1])
           root.destroy()
    
if __name__ == '__main__':
    gui_main_2.start_up()




