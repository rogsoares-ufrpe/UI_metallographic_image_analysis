#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Dec 08, 2023 06:15:24 PM -03  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import gui_main_2_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.map('TCheckbutton',background =
           [('selected', _bgcolor), ('active', _ana2color)], indicatorcolor =
           [('selected', _fgcolor), ('!active', _bgcolor)])
    _style_code_ran = 1

class Toplevel_MainWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1288x660+144+12")
        top.minsize(120, 1)
        top.maxsize(1540, 825)
        top.resizable(0,  0)
        top.title("MEDIA - Metallographic Digital Image Analyzer")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        self.MainFrame = tk.Frame(self.top)
        self.MainFrame.place(x=10, y=10, height=661, width=1269)
        self.MainFrame.configure(relief='groove')
        self.MainFrame.configure(borderwidth="2")
        self.MainFrame.configure(relief="groove")
        self.MainFrame.configure(background="#d9d9d9")
        self.MainFrame.configure(highlightbackground="#d9d9d9")
        self.MainFrame.configure(highlightcolor="black")
        self.MainCanvas = tk.Canvas(self.MainFrame)
        self.MainCanvas.place(x=10, y=10, height=600, width=800)
        self.MainCanvas.configure(background="#d9d9d9")
        self.MainCanvas.configure(borderwidth="2")
        self.MainCanvas.configure(highlightbackground="#d9d9d9")
        self.MainCanvas.configure(highlightcolor="black")
        self.MainCanvas.configure(insertbackground="black")
        self.MainCanvas.configure(relief="ridge")
        self.MainCanvas.configure(selectbackground="#c4c4c4")
        self.MainCanvas.configure(selectforeground="black")
        self.LabelTextPath = tk.Label(self.MainFrame)
        self.LabelTextPath.place(x=20, y=610, height=20, width=115)
        self.LabelTextPath.configure(activebackground="#f9f9f9")
        self.LabelTextPath.configure(anchor='w')
        self.LabelTextPath.configure(background="#d9d9d9")
        self.LabelTextPath.configure(compound='left')
        self.LabelTextPath.configure(disabledforeground="#a3a3a3")
        self.LabelTextPath.configure(foreground="#000000")
        self.LabelTextPath.configure(highlightbackground="#d9d9d9")
        self.LabelTextPath.configure(highlightcolor="black")
        self.LabelTextPath.configure(text='''File directory path:''')
        self.LabelDirectoryPathName = tk.Label(self.MainFrame)
        self.LabelDirectoryPathName.place(x=20, y=630, height=20, width=881)
        self.LabelDirectoryPathName.configure(activebackground="#f9f9f9")
        self.LabelDirectoryPathName.configure(anchor='w')
        self.LabelDirectoryPathName.configure(background="#d9d9d9")
        self.LabelDirectoryPathName.configure(compound='left')
        self.LabelDirectoryPathName.configure(disabledforeground="#a3a3a3")
        self.LabelDirectoryPathName.configure(foreground="#000000")
        self.LabelDirectoryPathName.configure(highlightbackground="#d9d9d9")
        self.LabelDirectoryPathName.configure(highlightcolor="black")
        self.LabelDirectoryPathName.configure(text='''<vazio>''')
        self.Labelframe_metallographic = tk.LabelFrame(self.MainFrame)
        self.Labelframe_metallographic.place(x=820, y=10, height=105, width=432)
        self.Labelframe_metallographic.configure(relief='groove')
        self.Labelframe_metallographic.configure(foreground="#000000")
        self.Labelframe_metallographic.configure(text='''Metallographic analysis''')
        self.Labelframe_metallographic.configure(background="#d9d9d9")
        self.Labelframe_metallographic.configure(highlightbackground="#d9d9d9")
        self.Labelframe_metallographic.configure(highlightcolor="black")
        self.Entry_magnification = tk.Entry(self.Labelframe_metallographic)
        self.Entry_magnification.place(x=105, y=28, height=20, width=54
                , bordermode='ignore')
        self.Entry_magnification.configure(background="white")
        self.Entry_magnification.configure(disabledforeground="#a3a3a3")
        self.Entry_magnification.configure(font="TkFixedFont")
        self.Entry_magnification.configure(foreground="#000000")
        self.Entry_magnification.configure(highlightbackground="#d9d9d9")
        self.Entry_magnification.configure(highlightcolor="black")
        self.Entry_magnification.configure(insertbackground="black")
        self.Entry_magnification.configure(selectbackground="#c4c4c4")
        self.Entry_magnification.configure(selectforeground="black")
        self.Label1 = tk.Label(self.Labelframe_metallographic)
        self.Label1.place(x=20, y=30, height=14, width=84, bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Magnification:''')
        self.Button_getScale = tk.Button(self.Labelframe_metallographic)
        self.Button_getScale.place(x=20, y=60, height=24, width=67
                , bordermode='ignore')
        self.Button_getScale.configure(activebackground="beige")
        self.Button_getScale.configure(activeforeground="black")
        self.Button_getScale.configure(background="#d9d9d9")
        self.Button_getScale.configure(command=gui_main_2_support.image_data_set)
        self.Button_getScale.configure(compound='left')
        self.Button_getScale.configure(disabledforeground="#a3a3a3")
        self.Button_getScale.configure(foreground="#000000")
        self.Button_getScale.configure(highlightbackground="#d9d9d9")
        self.Button_getScale.configure(highlightcolor="black")
        self.Button_getScale.configure(pady="0")
        self.Button_getScale.configure(text='''Get scale''')
        self.Button_getScale_tooltip = \
        ToolTip(self.Button_getScale, '''Click once on left and right scale corners to converte length in pixels to micrometers.''')

        _style_code()
        self.TextBox_output = ScrolledText(self.MainFrame)
        self.TextBox_output.place(x=820, y=120, height=485, width=435)
        self.TextBox_output.configure(background="white")
        self.TextBox_output.configure(font="-family {Courier New} -size 10")
        self.TextBox_output.configure(foreground="black")
        self.TextBox_output.configure(highlightbackground="#d9d9d9")
        self.TextBox_output.configure(highlightcolor="black")
        self.TextBox_output.configure(insertbackground="black")
        self.TextBox_output.configure(insertborderwidth="3")
        self.TextBox_output.configure(selectbackground="#c4c4c4")
        self.TextBox_output.configure(selectforeground="black")
        self.TextBox_output.configure(wrap="none")
        self.Label_coords = tk.Label(self.MainFrame)
        self.Label_coords.place(x=685, y=610, height=21, width=119)
        self.Label_coords.configure(activebackground="#f9f9f9")
        self.Label_coords.configure(anchor='w')
        self.Label_coords.configure(background="#d9d9d9")
        self.Label_coords.configure(compound='left')
        self.Label_coords.configure(disabledforeground="#a3a3a3")
        self.Label_coords.configure(foreground="#000000")
        self.Label_coords.configure(highlightbackground="#d9d9d9")
        self.Label_coords.configure(highlightcolor="black")
        self.Label_coords.configure(text='''x: 123.22  |  y = 123.22''')
        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(self.menubar, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,foreground='#000000', tearoff=0)
        self.menubar.add_cascade(compound='left', label='File', menu=self.sub_menu
                ,)
        self.sub_menu.add_command(command=gui_main_2_support.open_image_file
                ,compound='left', label='Open image file')
        self.sub_menu.add_command(compound='left',label='Save')
        self.sub_menu.add_command(compound='left',label='Close')
        self.sub_menu.add_separator()
        self.sub_menu.add_command(command=gui_main_2_support.close_application
                ,compound='left', label='Quit')
        self.sub_menu1 = tk.Menu(self.menubar, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,foreground='#000000', tearoff=0)
        self.menubar.add_cascade(compound='left', label='Image analysis'
                ,menu=self.sub_menu1, )
        self.sub_menu1.add_command(command=gui_main_2_support.open_segmentation_panel
                ,compound='left', label='Segmentation Panel')
        self.sub_menu1.add_command(compound='left'
                ,label='Metallographic procedures')
        self.sub_menu12 = tk.Menu(self.menubar, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,foreground='#000000', tearoff=0)
        self.menubar.add_cascade(compound='left', label='Help'
                ,menu=self.sub_menu12, )
        self.sub_menu12.add_command(compound='left',label='Tutorial')
        self.sub_menu12.add_separator()
        self.sub_menu12.add_command(command=gui_main_2_support.about
                ,compound='left', label='About')

class TopLevel_SegmentationWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("517x225+523+225")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(0,  0)
        top.title("Segmentation settings")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.edge_detection_var = tk.StringVar()
        self.meanSTD_var = tk.StringVar()
        self.rb_filter = tk.IntVar()
        self.numberedgrains_var = tk.IntVar()
        self.minmax_var = tk.IntVar()
        self.boundarybox_var = tk.IntVar()
        self.colorfill_var = tk.IntVar()
        self.drawcnt_var = tk.IntVar()

        self.LabelFrame_Segmentation = tk.LabelFrame(self.top)
        self.LabelFrame_Segmentation.place(x=10, y=10, height=205, width=500)
        self.LabelFrame_Segmentation.configure(relief='groove')
        self.LabelFrame_Segmentation.configure(foreground="#000000")
        self.LabelFrame_Segmentation.configure(text='''Segmentation''')
        self.LabelFrame_Segmentation.configure(background="#d9d9d9")
        self.LabelFrame_Segmentation.configure(highlightbackground="#d9d9d9")
        self.LabelFrame_Segmentation.configure(highlightcolor="black")
        self.lab47_lab47 = tk.LabelFrame(self.LabelFrame_Segmentation)
        self.lab47_lab47.place(x=10, y=20, height=175, width=140
                , bordermode='ignore')
        self.lab47_lab47.configure(relief='groove')
        self.lab47_lab47.configure(foreground="#000000")
        self.lab47_lab47.configure(text='''Filters''')
        self.lab47_lab47.configure(background="#d9d9d9")
        self.lab47_lab47.configure(highlightbackground="#d9d9d9")
        self.lab47_lab47.configure(highlightcolor="black")
        self.RadioButton_Filter_None = tk.Radiobutton(self.lab47_lab47)
        self.RadioButton_Filter_None.place(x=10, y=20, height=25, width=57
                , bordermode='ignore')
        self.RadioButton_Filter_None.configure(activebackground="beige")
        self.RadioButton_Filter_None.configure(activeforeground="black")
        self.RadioButton_Filter_None.configure(anchor='w')
        self.RadioButton_Filter_None.configure(background="#d9d9d9")
        self.RadioButton_Filter_None.configure(command=gui_main_2_support.select_filter)
        self.RadioButton_Filter_None.configure(compound='left')
        self.RadioButton_Filter_None.configure(disabledforeground="#a3a3a3")
        self.RadioButton_Filter_None.configure(foreground="#000000")
        self.RadioButton_Filter_None.configure(highlightbackground="#d9d9d9")
        self.RadioButton_Filter_None.configure(highlightcolor="black")
        self.RadioButton_Filter_None.configure(justify='left')
        self.RadioButton_Filter_None.configure(selectcolor="#d9d9d9")
        self.RadioButton_Filter_None.configure(text='''None''')
        self.RadioButton_Filter_None.configure(value='1')
        self.RadioButton_Filter_None.configure(variable=self.rb_filter)
        self.RadioButton_Filter_GaussianBlur = tk.Radiobutton(self.lab47_lab47)
        self.RadioButton_Filter_GaussianBlur.place(x=10, y=40, height=25
                , width=99, bordermode='ignore')
        self.RadioButton_Filter_GaussianBlur.configure(activebackground="beige")
        self.RadioButton_Filter_GaussianBlur.configure(activeforeground="black")
        self.RadioButton_Filter_GaussianBlur.configure(anchor='w')
        self.RadioButton_Filter_GaussianBlur.configure(background="#d9d9d9")
        self.RadioButton_Filter_GaussianBlur.configure(command=gui_main_2_support.select_filter)
        self.RadioButton_Filter_GaussianBlur.configure(compound='left')
        self.RadioButton_Filter_GaussianBlur.configure(disabledforeground="#a3a3a3")
        self.RadioButton_Filter_GaussianBlur.configure(foreground="#000000")
        self.RadioButton_Filter_GaussianBlur.configure(highlightbackground="#d9d9d9")
        self.RadioButton_Filter_GaussianBlur.configure(highlightcolor="black")
        self.RadioButton_Filter_GaussianBlur.configure(justify='left')
        self.RadioButton_Filter_GaussianBlur.configure(selectcolor="#d9d9d9")
        self.RadioButton_Filter_GaussianBlur.configure(text='''Gaussian Blur''')
        self.RadioButton_Filter_GaussianBlur.configure(value='2')
        self.RadioButton_Filter_GaussianBlur.configure(variable=self.rb_filter)
        self.RadioButton_Filter_2DConvolution = tk.Radiobutton(self.lab47_lab47)
        self.RadioButton_Filter_2DConvolution.place(x=10, y=60, height=25
                , width=111, bordermode='ignore')
        self.RadioButton_Filter_2DConvolution.configure(activebackground="beige")
        self.RadioButton_Filter_2DConvolution.configure(activeforeground="black")
        self.RadioButton_Filter_2DConvolution.configure(anchor='w')
        self.RadioButton_Filter_2DConvolution.configure(background="#d9d9d9")
        self.RadioButton_Filter_2DConvolution.configure(command=gui_main_2_support.select_filter)
        self.RadioButton_Filter_2DConvolution.configure(compound='left')
        self.RadioButton_Filter_2DConvolution.configure(disabledforeground="#a3a3a3")
        self.RadioButton_Filter_2DConvolution.configure(foreground="#000000")
        self.RadioButton_Filter_2DConvolution.configure(highlightbackground="#d9d9d9")
        self.RadioButton_Filter_2DConvolution.configure(highlightcolor="black")
        self.RadioButton_Filter_2DConvolution.configure(justify='left')
        self.RadioButton_Filter_2DConvolution.configure(selectcolor="#d9d9d9")
        self.RadioButton_Filter_2DConvolution.configure(text='''2D Convolution''')
        self.RadioButton_Filter_2DConvolution.configure(value='3')
        self.RadioButton_Filter_2DConvolution.configure(variable=self.rb_filter)
        self.Radiobutton_Filter_Bilateral = tk.Radiobutton(self.lab47_lab47)
        self.Radiobutton_Filter_Bilateral.place(x=10, y=80, height=25, width=70
                , bordermode='ignore')
        self.Radiobutton_Filter_Bilateral.configure(activebackground="beige")
        self.Radiobutton_Filter_Bilateral.configure(activeforeground="black")
        self.Radiobutton_Filter_Bilateral.configure(anchor='w')
        self.Radiobutton_Filter_Bilateral.configure(background="#d9d9d9")
        self.Radiobutton_Filter_Bilateral.configure(command=gui_main_2_support.select_filter)
        self.Radiobutton_Filter_Bilateral.configure(compound='left')
        self.Radiobutton_Filter_Bilateral.configure(disabledforeground="#a3a3a3")
        self.Radiobutton_Filter_Bilateral.configure(foreground="#000000")
        self.Radiobutton_Filter_Bilateral.configure(highlightbackground="#d9d9d9")
        self.Radiobutton_Filter_Bilateral.configure(highlightcolor="black")
        self.Radiobutton_Filter_Bilateral.configure(justify='left')
        self.Radiobutton_Filter_Bilateral.configure(selectcolor="#d9d9d9")
        self.Radiobutton_Filter_Bilateral.configure(text='''Bilateral''')
        self.Radiobutton_Filter_Bilateral.configure(value='4')
        self.Radiobutton_Filter_Bilateral.configure(variable=self.rb_filter)
        self.Radiobutton_Filter_MedianBlur = tk.Radiobutton(self.lab47_lab47)
        self.Radiobutton_Filter_MedianBlur.place(x=10, y=100, height=25, width=92
                , bordermode='ignore')
        self.Radiobutton_Filter_MedianBlur.configure(activebackground="beige")
        self.Radiobutton_Filter_MedianBlur.configure(activeforeground="black")
        self.Radiobutton_Filter_MedianBlur.configure(anchor='w')
        self.Radiobutton_Filter_MedianBlur.configure(background="#d9d9d9")
        self.Radiobutton_Filter_MedianBlur.configure(command=gui_main_2_support.select_filter)
        self.Radiobutton_Filter_MedianBlur.configure(compound='left')
        self.Radiobutton_Filter_MedianBlur.configure(disabledforeground="#a3a3a3")
        self.Radiobutton_Filter_MedianBlur.configure(foreground="#000000")
        self.Radiobutton_Filter_MedianBlur.configure(highlightbackground="#d9d9d9")
        self.Radiobutton_Filter_MedianBlur.configure(highlightcolor="black")
        self.Radiobutton_Filter_MedianBlur.configure(justify='left')
        self.Radiobutton_Filter_MedianBlur.configure(selectcolor="#d9d9d9")
        self.Radiobutton_Filter_MedianBlur.configure(text='''Median Blur''')
        self.Radiobutton_Filter_MedianBlur.configure(value='5')
        self.Radiobutton_Filter_MedianBlur.configure(variable=self.rb_filter)
        self.Radiobutton_Filter_Laplacian = tk.Radiobutton(self.lab47_lab47)
        self.Radiobutton_Filter_Laplacian.place(x=10, y=140, height=25, width=61
                , bordermode='ignore')
        self.Radiobutton_Filter_Laplacian.configure(activebackground="beige")
        self.Radiobutton_Filter_Laplacian.configure(activeforeground="black")
        self.Radiobutton_Filter_Laplacian.configure(anchor='w')
        self.Radiobutton_Filter_Laplacian.configure(background="#d9d9d9")
        self.Radiobutton_Filter_Laplacian.configure(command=gui_main_2_support.select_filter)
        self.Radiobutton_Filter_Laplacian.configure(compound='left')
        self.Radiobutton_Filter_Laplacian.configure(disabledforeground="#a3a3a3")
        self.Radiobutton_Filter_Laplacian.configure(foreground="#000000")
        self.Radiobutton_Filter_Laplacian.configure(highlightbackground="#d9d9d9")
        self.Radiobutton_Filter_Laplacian.configure(highlightcolor="black")
        self.Radiobutton_Filter_Laplacian.configure(justify='left')
        self.Radiobutton_Filter_Laplacian.configure(selectcolor="#d9d9d9")
        self.Radiobutton_Filter_Laplacian.configure(text='''Binary''')
        self.Radiobutton_Filter_Laplacian.configure(value='7')
        self.Radiobutton_Filter_Laplacian.configure(variable=self.rb_filter)
        self.Radiobutton_Averaging = tk.Radiobutton(self.lab47_lab47)
        self.Radiobutton_Averaging.place(x=10, y=120, height=25, width=82
                , bordermode='ignore')
        self.Radiobutton_Averaging.configure(activebackground="beige")
        self.Radiobutton_Averaging.configure(activeforeground="black")
        self.Radiobutton_Averaging.configure(anchor='w')
        self.Radiobutton_Averaging.configure(background="#d9d9d9")
        self.Radiobutton_Averaging.configure(command=gui_main_2_support.select_filter)
        self.Radiobutton_Averaging.configure(compound='left')
        self.Radiobutton_Averaging.configure(disabledforeground="#a3a3a3")
        self.Radiobutton_Averaging.configure(foreground="#000000")
        self.Radiobutton_Averaging.configure(highlightbackground="#d9d9d9")
        self.Radiobutton_Averaging.configure(highlightcolor="black")
        self.Radiobutton_Averaging.configure(justify='left')
        self.Radiobutton_Averaging.configure(selectcolor="#d9d9d9")
        self.Radiobutton_Averaging.configure(text='''Averaging''')
        self.Radiobutton_Averaging.configure(value='6')
        self.Radiobutton_Averaging.configure(variable=self.rb_filter)
        self.Button_DetectStructure = tk.Button(self.LabelFrame_Segmentation)
        self.Button_DetectStructure.place(x=190, y=160, height=34, width=111
                , bordermode='ignore')
        self.Button_DetectStructure.configure(activebackground="beige")
        self.Button_DetectStructure.configure(activeforeground="black")
        self.Button_DetectStructure.configure(background="#d9d9d9")
        self.Button_DetectStructure.configure(command=gui_main_2_support.select_structure_type)
        self.Button_DetectStructure.configure(compound='left')
        self.Button_DetectStructure.configure(disabledforeground="#a3a3a3")
        self.Button_DetectStructure.configure(foreground="#000000")
        self.Button_DetectStructure.configure(highlightbackground="#d9d9d9")
        self.Button_DetectStructure.configure(highlightcolor="black")
        self.Button_DetectStructure.configure(pady="0")
        self.Button_DetectStructure.configure(text='''Apply''')
        self.Labelframe_Edgedetection = tk.LabelFrame(self.LabelFrame_Segmentation)
        self.Labelframe_Edgedetection.place(x=160, y=20, height=55, width=170
                , bordermode='ignore')
        self.Labelframe_Edgedetection.configure(relief='groove')
        self.Labelframe_Edgedetection.configure(foreground="#000000")
        self.Labelframe_Edgedetection.configure(text='''Edge detection method''')
        self.Labelframe_Edgedetection.configure(background="#d9d9d9")
        self.Labelframe_Edgedetection.configure(highlightbackground="#d9d9d9")
        self.Labelframe_Edgedetection.configure(highlightcolor="black")
        _style_code()
        self.ComboBox_EdgeDetectionMethods = ttk.Combobox(self.Labelframe_Edgedetection)
        self.ComboBox_EdgeDetectionMethods.place(x=10, y=20, height=21, width=143
                , bordermode='ignore')
        self.value_list = ['Canny','Sobel','Prewitt',]
        self.ComboBox_EdgeDetectionMethods.configure(values=self.value_list)
        self.ComboBox_EdgeDetectionMethods.configure(textvariable=self.edge_detection_var)
        self.ComboBox_EdgeDetectionMethods.configure(takefocus="")
        self.lab47_lab48 = tk.LabelFrame(self.LabelFrame_Segmentation)
        self.lab47_lab48.place(x=160, y=100, height=55, width=170
                , bordermode='ignore')
        self.lab47_lab48.configure(relief='groove')
        self.lab47_lab48.configure(foreground="#000000")
        self.lab47_lab48.configure(text='''Mean and STD amplification''')
        self.lab47_lab48.configure(background="#d9d9d9")
        self.lab47_lab48.configure(highlightbackground="#d9d9d9")
        self.lab47_lab48.configure(highlightcolor="black")
        self.lab47_lab48_lab49 = tk.Label(self.lab47_lab48)
        self.lab47_lab48_lab49.place(x=10, y=30, height=21, width=6
                , bordermode='ignore')
        self.lab47_lab48_lab49.configure(activebackground="#f9f9f9")
        self.lab47_lab48_lab49.configure(anchor='w')
        self.lab47_lab48_lab49.configure(background="#d9d9d9")
        self.lab47_lab48_lab49.configure(compound='left')
        self.lab47_lab48_lab49.configure(disabledforeground="#a3a3a3")
        self.lab47_lab48_lab49.configure(foreground="#000000")
        self.lab47_lab48_lab49.configure(highlightbackground="#d9d9d9")
        self.lab47_lab48_lab49.configure(highlightcolor="black")
        self.ComboBox_MeanSTD = ttk.Combobox(self.lab47_lab48)
        self.ComboBox_MeanSTD.place(x=10, y=20, height=21, width=43
                , bordermode='ignore')
        self.value_list = ['1','2','3','4','5','6','7','8','9','10',]
        self.ComboBox_MeanSTD.configure(values=self.value_list)
        self.ComboBox_MeanSTD.configure(textvariable=self.meanSTD_var)
        self.ComboBox_MeanSTD.configure(takefocus="")
        self.lab47_lab49 = tk.LabelFrame(self.LabelFrame_Segmentation)
        self.lab47_lab49.place(x=340, y=20, height=135, width=150
                , bordermode='ignore')
        self.lab47_lab49.configure(relief='groove')
        self.lab47_lab49.configure(foreground="#000000")
        self.lab47_lab49.configure(text='''Dsiplay options''')
        self.lab47_lab49.configure(background="#d9d9d9")
        self.lab47_lab49.configure(highlightbackground="#d9d9d9")
        self.lab47_lab49.configure(highlightcolor="black")
        self.CheckBox_NumberedGrains = ttk.Checkbutton(self.lab47_lab49)
        self.CheckBox_NumberedGrains.place(x=10, y=20, width=115, height=21
                , bordermode='ignore')
        self.CheckBox_NumberedGrains.configure(variable=self.numberedgrains_var)
        self.CheckBox_NumberedGrains.configure(takefocus="")
        self.CheckBox_NumberedGrains.configure(text='''Numbered grains''')
        self.CheckBox_NumberedGrains.configure(compound='left')
        self.CheckBox_NumberedGrains_tooltip = \
        ToolTip(self.CheckBox_NumberedGrains, '''Each grain recives a tag number''')

        self.CheckBox_minmax = ttk.Checkbutton(self.lab47_lab49)
        self.CheckBox_minmax.place(x=10, y=40, width=132, height=21
                , bordermode='ignore')
        self.CheckBox_minmax.configure(variable=self.minmax_var)
        self.CheckBox_minmax.configure(takefocus="")
        self.CheckBox_minmax.configure(text='''Hightlight min/max.''')
        self.CheckBox_minmax.configure(compound='left')
        self.CheckBox_minmax_tooltip = \
        ToolTip(self.CheckBox_minmax, '''Highlight the smallest and the largest grains.''')

        self.CheckBox_BoundaryBox = ttk.Checkbutton(self.lab47_lab49)
        self.CheckBox_BoundaryBox.place(x=10, y=60, width=128, height=21
                , bordermode='ignore')
        self.CheckBox_BoundaryBox.configure(variable=self.boundarybox_var)
        self.CheckBox_BoundaryBox.configure(takefocus="")
        self.CheckBox_BoundaryBox.configure(text='''Grain boundary box''')
        self.CheckBox_BoundaryBox.configure(compound='left')
        self.CheckBox_BoundaryBox_tooltip = \
        ToolTip(self.CheckBox_BoundaryBox, '''Draw a boundary box around each grain.''')

        self.CheckBox_fill_grains = ttk.Checkbutton(self.lab47_lab49)
        self.CheckBox_fill_grains.place(x=10, y=80, width=103, height=21
                , bordermode='ignore')
        self.CheckBox_fill_grains.configure(variable=self.colorfill_var)
        self.CheckBox_fill_grains.configure(takefocus="")
        self.CheckBox_fill_grains.configure(text='''Color fill grains''')
        self.CheckBox_fill_grains.configure(compound='left')
        self.CheckBox_fill_grains_tooltip = \
        ToolTip(self.CheckBox_fill_grains, '''Fill grains interior''')

        self.CheckBox = ttk.Checkbutton(self.lab47_lab49)
        self.CheckBox.place(x=10, y=100, width=100, height=21
                , bordermode='ignore')
        self.CheckBox.configure(variable=self.drawcnt_var)
        self.CheckBox.configure(takefocus="")
        self.CheckBox.configure(text='''Draw contours''')
        self.CheckBox.configure(compound='left')
        self.Button_Zoom = tk.Button(self.LabelFrame_Segmentation)
        self.Button_Zoom.place(x=360, y=160, height=34, width=97
                , bordermode='ignore')
        self.Button_Zoom.configure(activebackground="beige")
        self.Button_Zoom.configure(activeforeground="black")
        self.Button_Zoom.configure(background="#d9d9d9")
        self.Button_Zoom.configure(compound='left')
        self.Button_Zoom.configure(disabledforeground="#a3a3a3")
        self.Button_Zoom.configure(foreground="#000000")
        self.Button_Zoom.configure(highlightbackground="#d9d9d9")
        self.Button_Zoom.configure(highlightcolor="black")
        self.Button_Zoom.configure(pady="0")
        self.Button_Zoom.configure(text='''Zoom''')

class DisplayZoomWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("840x544+361+76")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(0,  0)
        top.title("Zoom window")
        top.configure(background="#d9d9d9")

        self.top = top

        self.ZoomCanvas = tk.Canvas(self.top)
        self.ZoomCanvas.place(x=20, y=20, height=503, width=803)
        self.ZoomCanvas.configure(background="#d9d9d9")
        self.ZoomCanvas.configure(borderwidth="2")
        self.ZoomCanvas.configure(insertbackground="black")
        self.ZoomCanvas.configure(relief="ridge")
        self.ZoomCanvas.configure(selectbackground="#ffffff")
        self.ZoomCanvas.configure(selectforeground="black")

from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkDefaultFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    gui_main_2_support.main()

if __name__ == '__main__':
    gui_main_2_support.main()




