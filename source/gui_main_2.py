#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    May 16, 2024 05:58:04 PM -03  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import gui_main_2_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return
    gui_main_2_support.root.tk.eval('set ::xframe #d9d9d9')
    gui_main_2_support.root.tk.eval('set ::xfore #000000')
    gui_main_2_support.root.tk.eval('set ::ana2color beige')
    gui_main_2_support.root.tk.eval('set ::_tabfg1 black')
    gui_main_2_support.root.tk.eval('set ::_tabfg2 white')
    gui_main_2_support.root.tk.eval('set ::_tabbg1 #d9d9d9')
    gui_main_2_support.root.tk.eval('set ::_tabbg2 gray40')
    gui_main_2_support.root.tk.eval('set ::_bgmode light')        
    try: gui_main_2_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'page-legacy.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('page-legacy')
    style.configure('.', font = "TkDefaultFont")
    gui_main_2_support.root.tk_setPalette(
            foreground = '#000000',
            background = '#d9d9d9',
            activeForeground = 'black',
            activeBackground = '#d9d9d9',
            selectForeground = 'black',
            selectBackground =  '#d9d9d9')
    _style_code_ran = 1

class Toplevel_MainWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1290x690+64+108")
        top.minsize(120, 1)
        top.maxsize(1540, 825)
        top.resizable(0,  0)
        top.title("MEDIA - Metallographic Digital Image Analyzer")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top = top

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(self.menubar, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,font="-family {Segoe UI} -size 9", foreground='#000000'
                ,tearoff=0)
        self.menubar.add_cascade(compound='left', label='File', menu=self.sub_menu
                ,)
        self.sub_menu.add_command(command=gui_main_2_support.open_image_file
                ,compound='left', label='Open image file')
        self.sub_menu.add_command(command=gui_main_2_support.exporttoxlxs
                ,compound='left', label='Export to Excel')
        self.sub_menu.add_separator()
        self.sub_menu.add_command(command=gui_main_2_support.close_application
                ,compound='left', label='Quit')
        self.sub_menu1 = tk.Menu(self.menubar, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,font="-family {Segoe UI} -size 9", foreground='#000000'
                ,tearoff=0)
        self.menubar.add_cascade(compound='left', label='Image analysis'
                ,menu=self.sub_menu1, )
        self.sub_menu1.add_command(command=gui_main_2_support.open_segmentation_panel
                ,compound='left', label='Segmentation Panel')
        self.sub_menu1.add_command(command=gui_main_2_support.open_procedure_panel
                ,compound='left', label='Measuring procedures')
        self.sub_menu12 = tk.Menu(self.menubar, activebackground='beige'
                ,activeborderwidth=1, activeforeground='black'
                ,background='#d9d9d9', borderwidth=1, disabledforeground='#a3a3a3'
                ,font="-family {Segoe UI} -size 9", foreground='#000000'
                ,tearoff=0)
        self.menubar.add_cascade(compound='left', label='Help'
                ,menu=self.sub_menu12, )
        self.sub_menu12.add_command(compound='left',label='Tutorial')
        self.sub_menu12.add_separator()
        self.sub_menu12.add_command(command=gui_main_2_support.about
                ,compound='left', label='About')

        self.MainFrame = tk.Frame(self.top)
        self.MainFrame.place(x=10, y=10, height=670, width=1274)
        self.MainFrame.configure(relief='groove')
        self.MainFrame.configure(borderwidth="2")
        self.MainFrame.configure(relief="groove")
        self.MainFrame.configure(background="#d9d9d9")
        self.MainFrame.configure(highlightbackground="#d9d9d9")
        self.MainFrame.configure(highlightcolor="#000000")

        self.LabelTextPath = tk.Label(self.MainFrame)
        self.LabelTextPath.place(x=10, y=620, height=21, width=116)
        self.LabelTextPath.configure(activebackground="#f9f9f9")
        self.LabelTextPath.configure(activeforeground="black")
        self.LabelTextPath.configure(anchor='w')
        self.LabelTextPath.configure(background="#d9d9d9")
        self.LabelTextPath.configure(compound='left')
        self.LabelTextPath.configure(disabledforeground="#a3a3a3")
        self.LabelTextPath.configure(font="-family {Segoe UI} -size 9")
        self.LabelTextPath.configure(foreground="#000000")
        self.LabelTextPath.configure(highlightbackground="#d9d9d9")
        self.LabelTextPath.configure(highlightcolor="#000000")
        self.LabelTextPath.configure(text='''File directory path:''')

        self.MainCanvas = tk.Canvas(self.MainFrame)
        self.MainCanvas.place(x=10, y=10, height=610, width=800)
        self.MainCanvas.configure(background="#d9d9d9")
        self.MainCanvas.configure(borderwidth="2")
        self.MainCanvas.configure(highlightbackground="#d9d9d9")
        self.MainCanvas.configure(highlightcolor="#000000")
        self.MainCanvas.configure(insertbackground="#000000")
        self.MainCanvas.configure(relief="ridge")
        self.MainCanvas.configure(selectbackground="#c4c4c4")
        self.MainCanvas.configure(selectforeground="black")

        self.CanvasHistogram = tk.Canvas(self.MainFrame)
        self.CanvasHistogram.place(x=814, y=310, height=310, width=450)
        self.CanvasHistogram.configure(background="#d9d9d9")
        self.CanvasHistogram.configure(borderwidth="2")
        self.CanvasHistogram.configure(highlightbackground="#d9d9d9")
        self.CanvasHistogram.configure(highlightcolor="#000000")
        self.CanvasHistogram.configure(insertbackground="#000000")
        self.CanvasHistogram.configure(relief="ridge")
        self.CanvasHistogram.configure(selectbackground="#c4c4c4")
        self.CanvasHistogram.configure(selectforeground="black")

        _style_code()
        self.TextBox_output = ScrolledText(self.MainFrame)
        self.TextBox_output.place(x=815, y=12, height=285, width=450)
        self.TextBox_output.configure(background="white")
        self.TextBox_output.configure(font="-family {Courier New} -size 10")
        self.TextBox_output.configure(foreground="#000000")
        self.TextBox_output.configure(highlightbackground="#d9d9d9")
        self.TextBox_output.configure(highlightcolor="#000000")
        self.TextBox_output.configure(insertbackground="#000000")
        self.TextBox_output.configure(insertborderwidth="3")
        self.TextBox_output.configure(selectbackground="#c4c4c4")
        self.TextBox_output.configure(selectforeground="black")
        self.TextBox_output.configure(wrap="none")

        self.LabelDirectoryPathName = tk.Label(self.MainFrame)
        self.LabelDirectoryPathName.place(x=10, y=640, height=21, width=884)
        self.LabelDirectoryPathName.configure(activebackground="#f9f9f9")
        self.LabelDirectoryPathName.configure(activeforeground="black")
        self.LabelDirectoryPathName.configure(anchor='w')
        self.LabelDirectoryPathName.configure(background="#d9d9d9")
        self.LabelDirectoryPathName.configure(compound='left')
        self.LabelDirectoryPathName.configure(disabledforeground="#a3a3a3")
        self.LabelDirectoryPathName.configure(font="-family {Segoe UI} -size 9")
        self.LabelDirectoryPathName.configure(foreground="#000000")
        self.LabelDirectoryPathName.configure(highlightbackground="#d9d9d9")
        self.LabelDirectoryPathName.configure(highlightcolor="#000000")
        self.LabelDirectoryPathName.configure(text='''<vazio>''')

class TopLevel_SegmentationWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("521x223+960+82")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(0,  0)
        top.title("Segmentation settings")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top = top
        self.edge_detection_var = tk.StringVar()
        self.meanSTD_var = tk.StringVar()
        self.rb_filter = tk.IntVar()
        self.boundarybox_var = tk.IntVar()
        self.numberedgrains_var = tk.IntVar()
        self.minmax_var = tk.IntVar()
        self.drawcnt_var = tk.IntVar()
        self.colorfill_var = tk.IntVar()

        self.LabelFrame_Segmentation = tk.LabelFrame(self.top)
        self.LabelFrame_Segmentation.place(x=10, y=10, height=205, width=500)
        self.LabelFrame_Segmentation.configure(relief='groove')
        self.LabelFrame_Segmentation.configure(font="-family {Segoe UI} -size 9")
        self.LabelFrame_Segmentation.configure(foreground="#000000")
        self.LabelFrame_Segmentation.configure(text='''Segmentation''')
        self.LabelFrame_Segmentation.configure(background="#d9d9d9")
        self.LabelFrame_Segmentation.configure(highlightbackground="#d9d9d9")
        self.LabelFrame_Segmentation.configure(highlightcolor="#000000")

        self.lab47_lab47 = tk.LabelFrame(self.LabelFrame_Segmentation)
        self.lab47_lab47.place(x=10, y=20, height=175, width=140
                , bordermode='ignore')
        self.lab47_lab47.configure(relief='groove')
        self.lab47_lab47.configure(font="-family {Segoe UI} -size 9")
        self.lab47_lab47.configure(foreground="#000000")
        self.lab47_lab47.configure(text='''Filters''')
        self.lab47_lab47.configure(background="#d9d9d9")
        self.lab47_lab47.configure(highlightbackground="#d9d9d9")
        self.lab47_lab47.configure(highlightcolor="#000000")

        self.RadioButton_Filter_None = tk.Radiobutton(self.lab47_lab47)
        self.RadioButton_Filter_None.place(x=10, y=20, height=25, width=57
                , bordermode='ignore')
        self.RadioButton_Filter_None.configure(activebackground="beige")
        self.RadioButton_Filter_None.configure(activeforeground="black")
        self.RadioButton_Filter_None.configure(anchor='w')
        self.RadioButton_Filter_None.configure(background="#d9d9d9")
        self.RadioButton_Filter_None.configure(command=gui_main_2_support.select_filter)
        self.RadioButton_Filter_None.configure(compound='left')
        self.RadioButton_Filter_None.configure(disabledforeground="#a3a3a3")
        self.RadioButton_Filter_None.configure(font="-family {Segoe UI} -size 9")
        self.RadioButton_Filter_None.configure(foreground="#000000")
        self.RadioButton_Filter_None.configure(highlightbackground="#d9d9d9")
        self.RadioButton_Filter_None.configure(highlightcolor="#000000")
        self.RadioButton_Filter_None.configure(justify='left')
        self.RadioButton_Filter_None.configure(selectcolor="#d9d9d9")
        self.RadioButton_Filter_None.configure(text='''None''')
        self.RadioButton_Filter_None.configure(value='1')
        self.RadioButton_Filter_None.configure(variable=self.rb_filter)

        self.RadioButton_Filter_GaussianBlur = tk.Radiobutton(self.lab47_lab47)
        self.RadioButton_Filter_GaussianBlur.place(x=10, y=40, height=25
                , width=99, bordermode='ignore')
        self.RadioButton_Filter_GaussianBlur.configure(activebackground="beige")
        self.RadioButton_Filter_GaussianBlur.configure(activeforeground="black")
        self.RadioButton_Filter_GaussianBlur.configure(anchor='w')
        self.RadioButton_Filter_GaussianBlur.configure(background="#d9d9d9")
        self.RadioButton_Filter_GaussianBlur.configure(command=gui_main_2_support.select_filter)
        self.RadioButton_Filter_GaussianBlur.configure(compound='left')
        self.RadioButton_Filter_GaussianBlur.configure(disabledforeground="#a3a3a3")
        self.RadioButton_Filter_GaussianBlur.configure(font="-family {Segoe UI} -size 9")
        self.RadioButton_Filter_GaussianBlur.configure(foreground="#000000")
        self.RadioButton_Filter_GaussianBlur.configure(highlightbackground="#d9d9d9")
        self.RadioButton_Filter_GaussianBlur.configure(highlightcolor="#000000")
        self.RadioButton_Filter_GaussianBlur.configure(justify='left')
        self.RadioButton_Filter_GaussianBlur.configure(selectcolor="#d9d9d9")
        self.RadioButton_Filter_GaussianBlur.configure(text='''Gaussian Blur''')
        self.RadioButton_Filter_GaussianBlur.configure(value='2')
        self.RadioButton_Filter_GaussianBlur.configure(variable=self.rb_filter)

        self.RadioButton_Filter_2DConvolution = tk.Radiobutton(self.lab47_lab47)
        self.RadioButton_Filter_2DConvolution.place(x=10, y=60, height=25
                , width=111, bordermode='ignore')
        self.RadioButton_Filter_2DConvolution.configure(activebackground="beige")
        self.RadioButton_Filter_2DConvolution.configure(activeforeground="black")
        self.RadioButton_Filter_2DConvolution.configure(anchor='w')
        self.RadioButton_Filter_2DConvolution.configure(background="#d9d9d9")
        self.RadioButton_Filter_2DConvolution.configure(command=gui_main_2_support.select_filter)
        self.RadioButton_Filter_2DConvolution.configure(compound='left')
        self.RadioButton_Filter_2DConvolution.configure(disabledforeground="#a3a3a3")
        self.RadioButton_Filter_2DConvolution.configure(font="-family {Segoe UI} -size 9")
        self.RadioButton_Filter_2DConvolution.configure(foreground="#000000")
        self.RadioButton_Filter_2DConvolution.configure(highlightbackground="#d9d9d9")
        self.RadioButton_Filter_2DConvolution.configure(highlightcolor="#000000")
        self.RadioButton_Filter_2DConvolution.configure(justify='left')
        self.RadioButton_Filter_2DConvolution.configure(selectcolor="#d9d9d9")
        self.RadioButton_Filter_2DConvolution.configure(text='''2D Convolution''')
        self.RadioButton_Filter_2DConvolution.configure(value='3')
        self.RadioButton_Filter_2DConvolution.configure(variable=self.rb_filter)

        self.Radiobutton_Filter_Bilateral = tk.Radiobutton(self.lab47_lab47)
        self.Radiobutton_Filter_Bilateral.place(x=10, y=80, height=25, width=70
                , bordermode='ignore')
        self.Radiobutton_Filter_Bilateral.configure(activebackground="beige")
        self.Radiobutton_Filter_Bilateral.configure(activeforeground="black")
        self.Radiobutton_Filter_Bilateral.configure(anchor='w')
        self.Radiobutton_Filter_Bilateral.configure(background="#d9d9d9")
        self.Radiobutton_Filter_Bilateral.configure(command=gui_main_2_support.select_filter)
        self.Radiobutton_Filter_Bilateral.configure(compound='left')
        self.Radiobutton_Filter_Bilateral.configure(disabledforeground="#a3a3a3")
        self.Radiobutton_Filter_Bilateral.configure(font="-family {Segoe UI} -size 9")
        self.Radiobutton_Filter_Bilateral.configure(foreground="#000000")
        self.Radiobutton_Filter_Bilateral.configure(highlightbackground="#d9d9d9")
        self.Radiobutton_Filter_Bilateral.configure(highlightcolor="#000000")
        self.Radiobutton_Filter_Bilateral.configure(justify='left')
        self.Radiobutton_Filter_Bilateral.configure(selectcolor="#d9d9d9")
        self.Radiobutton_Filter_Bilateral.configure(text='''Bilateral''')
        self.Radiobutton_Filter_Bilateral.configure(value='4')
        self.Radiobutton_Filter_Bilateral.configure(variable=self.rb_filter)

        self.Radiobutton_Filter_MedianBlur = tk.Radiobutton(self.lab47_lab47)
        self.Radiobutton_Filter_MedianBlur.place(x=10, y=100, height=25, width=92
                , bordermode='ignore')
        self.Radiobutton_Filter_MedianBlur.configure(activebackground="beige")
        self.Radiobutton_Filter_MedianBlur.configure(activeforeground="black")
        self.Radiobutton_Filter_MedianBlur.configure(anchor='w')
        self.Radiobutton_Filter_MedianBlur.configure(background="#d9d9d9")
        self.Radiobutton_Filter_MedianBlur.configure(command=gui_main_2_support.select_filter)
        self.Radiobutton_Filter_MedianBlur.configure(compound='left')
        self.Radiobutton_Filter_MedianBlur.configure(disabledforeground="#a3a3a3")
        self.Radiobutton_Filter_MedianBlur.configure(font="-family {Segoe UI} -size 9")
        self.Radiobutton_Filter_MedianBlur.configure(foreground="#000000")
        self.Radiobutton_Filter_MedianBlur.configure(highlightbackground="#d9d9d9")
        self.Radiobutton_Filter_MedianBlur.configure(highlightcolor="#000000")
        self.Radiobutton_Filter_MedianBlur.configure(justify='left')
        self.Radiobutton_Filter_MedianBlur.configure(selectcolor="#d9d9d9")
        self.Radiobutton_Filter_MedianBlur.configure(text='''Median Blur''')
        self.Radiobutton_Filter_MedianBlur.configure(value='5')
        self.Radiobutton_Filter_MedianBlur.configure(variable=self.rb_filter)

        self.Radiobutton_Filter_Laplacian = tk.Radiobutton(self.lab47_lab47)
        self.Radiobutton_Filter_Laplacian.place(x=10, y=140, height=25, width=61
                , bordermode='ignore')
        self.Radiobutton_Filter_Laplacian.configure(activebackground="beige")
        self.Radiobutton_Filter_Laplacian.configure(activeforeground="black")
        self.Radiobutton_Filter_Laplacian.configure(anchor='w')
        self.Radiobutton_Filter_Laplacian.configure(background="#d9d9d9")
        self.Radiobutton_Filter_Laplacian.configure(command=gui_main_2_support.select_filter)
        self.Radiobutton_Filter_Laplacian.configure(compound='left')
        self.Radiobutton_Filter_Laplacian.configure(disabledforeground="#a3a3a3")
        self.Radiobutton_Filter_Laplacian.configure(font="-family {Segoe UI} -size 9")
        self.Radiobutton_Filter_Laplacian.configure(foreground="#000000")
        self.Radiobutton_Filter_Laplacian.configure(highlightbackground="#d9d9d9")
        self.Radiobutton_Filter_Laplacian.configure(highlightcolor="#000000")
        self.Radiobutton_Filter_Laplacian.configure(justify='left')
        self.Radiobutton_Filter_Laplacian.configure(selectcolor="#d9d9d9")
        self.Radiobutton_Filter_Laplacian.configure(text='''Binary''')
        self.Radiobutton_Filter_Laplacian.configure(value='7')
        self.Radiobutton_Filter_Laplacian.configure(variable=self.rb_filter)

        self.Radiobutton_Averaging = tk.Radiobutton(self.lab47_lab47)
        self.Radiobutton_Averaging.place(x=10, y=120, height=25, width=82
                , bordermode='ignore')
        self.Radiobutton_Averaging.configure(activebackground="beige")
        self.Radiobutton_Averaging.configure(activeforeground="black")
        self.Radiobutton_Averaging.configure(anchor='w')
        self.Radiobutton_Averaging.configure(background="#d9d9d9")
        self.Radiobutton_Averaging.configure(command=gui_main_2_support.select_filter)
        self.Radiobutton_Averaging.configure(compound='left')
        self.Radiobutton_Averaging.configure(disabledforeground="#a3a3a3")
        self.Radiobutton_Averaging.configure(font="-family {Segoe UI} -size 9")
        self.Radiobutton_Averaging.configure(foreground="#000000")
        self.Radiobutton_Averaging.configure(highlightbackground="#d9d9d9")
        self.Radiobutton_Averaging.configure(highlightcolor="#000000")
        self.Radiobutton_Averaging.configure(justify='left')
        self.Radiobutton_Averaging.configure(selectcolor="#d9d9d9")
        self.Radiobutton_Averaging.configure(text='''Averaging''')
        self.Radiobutton_Averaging.configure(value='6')
        self.Radiobutton_Averaging.configure(variable=self.rb_filter)

        self.Labelframe_Edgedetection = tk.LabelFrame(self.LabelFrame_Segmentation)
        self.Labelframe_Edgedetection.place(x=160, y=20, height=55, width=170
                , bordermode='ignore')
        self.Labelframe_Edgedetection.configure(relief='groove')
        self.Labelframe_Edgedetection.configure(font="-family {Segoe UI} -size 9")
        self.Labelframe_Edgedetection.configure(foreground="#000000")
        self.Labelframe_Edgedetection.configure(text='''Edge detection method''')
        self.Labelframe_Edgedetection.configure(background="#d9d9d9")
        self.Labelframe_Edgedetection.configure(highlightbackground="#d9d9d9")
        self.Labelframe_Edgedetection.configure(highlightcolor="#000000")

        _style_code()
        self.ComboBox_EdgeDetectionMethods = ttk.Combobox(self.Labelframe_Edgedetection)
        self.ComboBox_EdgeDetectionMethods.place(x=10, y=20, height=21, width=140
                , bordermode='ignore')
        self.value_list = ['Canny','Sobel','Prewitt',]
        self.ComboBox_EdgeDetectionMethods.configure(values=self.value_list)
        self.ComboBox_EdgeDetectionMethods.configure(font="-family {Segoe UI} -size 9")
        self.ComboBox_EdgeDetectionMethods.configure(textvariable=self.edge_detection_var)

        self.lab47_lab48 = tk.LabelFrame(self.LabelFrame_Segmentation)
        self.lab47_lab48.place(x=160, y=80, height=55, width=170
                , bordermode='ignore')
        self.lab47_lab48.configure(relief='groove')
        self.lab47_lab48.configure(font="-family {Segoe UI} -size 9")
        self.lab47_lab48.configure(foreground="#000000")
        self.lab47_lab48.configure(text='''Mean and STD amplification''')
        self.lab47_lab48.configure(background="#d9d9d9")
        self.lab47_lab48.configure(highlightbackground="#d9d9d9")
        self.lab47_lab48.configure(highlightcolor="#000000")

        self.lab47_lab48_lab49 = tk.Label(self.lab47_lab48)
        self.lab47_lab48_lab49.place(x=10, y=30, height=21, width=6
                , bordermode='ignore')
        self.lab47_lab48_lab49.configure(activebackground="#f9f9f9")
        self.lab47_lab48_lab49.configure(activeforeground="black")
        self.lab47_lab48_lab49.configure(anchor='w')
        self.lab47_lab48_lab49.configure(background="#d9d9d9")
        self.lab47_lab48_lab49.configure(compound='left')
        self.lab47_lab48_lab49.configure(disabledforeground="#a3a3a3")
        self.lab47_lab48_lab49.configure(font="-family {Segoe UI} -size 9")
        self.lab47_lab48_lab49.configure(foreground="#000000")
        self.lab47_lab48_lab49.configure(highlightbackground="#d9d9d9")
        self.lab47_lab48_lab49.configure(highlightcolor="#000000")

        self.ComboBox_MeanSTD = ttk.Combobox(self.lab47_lab48)
        self.ComboBox_MeanSTD.place(x=10, y=20, height=21, width=43
                , bordermode='ignore')
        self.value_list = ['1','2','3','4','5','6','7','8','9','10',]
        self.ComboBox_MeanSTD.configure(values=self.value_list)
        self.ComboBox_MeanSTD.configure(font="-family {Segoe UI} -size 9")
        self.ComboBox_MeanSTD.configure(textvariable=self.meanSTD_var)

        self.ButtonDataImage = tk.Button(self.LabelFrame_Segmentation)
        self.ButtonDataImage.place(x=160, y=150, height=34, width=87
                , bordermode='ignore')
        self.ButtonDataImage.configure(activebackground="beige")
        self.ButtonDataImage.configure(activeforeground="black")
        self.ButtonDataImage.configure(background="#d9d9d9")
        self.ButtonDataImage.configure(command=gui_main_2_support.open_data_image_window)
        self.ButtonDataImage.configure(compound='left')
        self.ButtonDataImage.configure(disabledforeground="#a3a3a3")
        self.ButtonDataImage.configure(font="-family {Segoe UI} -size 9")
        self.ButtonDataImage.configure(foreground="#000000")
        self.ButtonDataImage.configure(highlightbackground="#d9d9d9")
        self.ButtonDataImage.configure(highlightcolor="#000000")
        self.ButtonDataImage.configure(pady="0")
        self.ButtonDataImage.configure(text='''Data image''')
        self.ButtonDataImage_tooltip = \
        ToolTip(self.ButtonDataImage, '''Opens the data image window''')

        self.ButtonApplySgmentation = tk.Button(self.LabelFrame_Segmentation)
        self.ButtonApplySgmentation.place(x=260, y=150, height=34, width=67
                , bordermode='ignore')
        self.ButtonApplySgmentation.configure(activebackground="beige")
        self.ButtonApplySgmentation.configure(activeforeground="black")
        self.ButtonApplySgmentation.configure(background="#d9d9d9")
        self.ButtonApplySgmentation.configure(command=gui_main_2_support.start_grains_segmentation)
        self.ButtonApplySgmentation.configure(compound='left')
        self.ButtonApplySgmentation.configure(disabledforeground="#a3a3a3")
        self.ButtonApplySgmentation.configure(font="-family {Segoe UI} -size 9")
        self.ButtonApplySgmentation.configure(foreground="#000000")
        self.ButtonApplySgmentation.configure(highlightbackground="#d9d9d9")
        self.ButtonApplySgmentation.configure(highlightcolor="#000000")
        self.ButtonApplySgmentation.configure(pady="0")
        self.ButtonApplySgmentation.configure(text='''Apply''')

        self.lab47_lab49 = tk.LabelFrame(self.LabelFrame_Segmentation)
        self.lab47_lab49.place(x=340, y=20, height=165, width=150
                , bordermode='ignore')
        self.lab47_lab49.configure(relief='groove')
        self.lab47_lab49.configure(font="-family {Segoe UI} -size 9")
        self.lab47_lab49.configure(foreground="#000000")
        self.lab47_lab49.configure(text='''Dsiplay options''')
        self.lab47_lab49.configure(background="#d9d9d9")
        self.lab47_lab49.configure(highlightbackground="#d9d9d9")
        self.lab47_lab49.configure(highlightcolor="#000000")

        self.CheckBox_BoundaryBox = ttk.Checkbutton(self.lab47_lab49)
        self.CheckBox_BoundaryBox.place(x=10, y=60, width=121, height=19
                , bordermode='ignore')
        self.CheckBox_BoundaryBox.configure(variable=self.boundarybox_var)
        self.CheckBox_BoundaryBox.configure(text='''Grain boundary box''')
        self.CheckBox_BoundaryBox.configure(compound='left')
        self.CheckBox_BoundaryBox_tooltip = \
        ToolTip(self.CheckBox_BoundaryBox, '''Draw a boundary box around each grain.''')

        self.CheckBox_NumberedGrains = ttk.Checkbutton(self.lab47_lab49)
        self.CheckBox_NumberedGrains.place(x=10, y=20, width=108, height=19
                , bordermode='ignore')
        self.CheckBox_NumberedGrains.configure(variable=self.numberedgrains_var)
        self.CheckBox_NumberedGrains.configure(text='''Numbered grains''')
        self.CheckBox_NumberedGrains.configure(compound='left')
        self.CheckBox_NumberedGrains_tooltip = \
        ToolTip(self.CheckBox_NumberedGrains, '''Each grain recives a tag number''')

        self.CheckBox_minmax = ttk.Checkbutton(self.lab47_lab49)
        self.CheckBox_minmax.place(x=10, y=40, width=125, height=19
                , bordermode='ignore')
        self.CheckBox_minmax.configure(variable=self.minmax_var)
        self.CheckBox_minmax.configure(text='''Hightlight min/max.''')
        self.CheckBox_minmax.configure(compound='left')
        self.CheckBox_minmax_tooltip = \
        ToolTip(self.CheckBox_minmax, '''Highlight the smallest and the largest grains.''')

        self.CheckBox = ttk.Checkbutton(self.lab47_lab49)
        self.CheckBox.place(x=10, y=100, width=93, height=19
                , bordermode='ignore')
        self.CheckBox.configure(variable=self.drawcnt_var)
        self.CheckBox.configure(text='''Draw contours''')
        self.CheckBox.configure(compound='left')

        self.CheckBox_fill_grains = ttk.Checkbutton(self.lab47_lab49)
        self.CheckBox_fill_grains.place(x=10, y=80, width=96, height=19
                , bordermode='ignore')
        self.CheckBox_fill_grains.configure(variable=self.colorfill_var)
        self.CheckBox_fill_grains.configure(text='''Color fill grains''')
        self.CheckBox_fill_grains.configure(compound='left')
        self.CheckBox_fill_grains_tooltip = \
        ToolTip(self.CheckBox_fill_grains, '''Fill grains interior''')

class ImageDataWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("329x92+964+338")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(0,  0)
        top.title("Image data")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top = top

        self.lab53 = tk.LabelFrame(self.top)
        self.lab53.place(x=10, y=10, height=75, width=310)
        self.lab53.configure(relief='groove')
        self.lab53.configure(font="-family {Segoe UI} -size 9")
        self.lab53.configure(foreground="#000000")
        self.lab53.configure(background="#d9d9d9")
        self.lab53.configure(highlightbackground="#d9d9d9")
        self.lab53.configure(highlightcolor="#000000")

        self.LabelMagnification = tk.Label(self.lab53)
        self.LabelMagnification.place(x=10, y=10, height=21, width=147
                , bordermode='ignore')
        self.LabelMagnification.configure(activebackground="#f9f9f9")
        self.LabelMagnification.configure(activeforeground="black")
        self.LabelMagnification.configure(anchor='w')
        self.LabelMagnification.configure(background="#d9d9d9")
        self.LabelMagnification.configure(compound='left')
        self.LabelMagnification.configure(disabledforeground="#a3a3a3")
        self.LabelMagnification.configure(font="-family {Segoe UI} -size 9")
        self.LabelMagnification.configure(foreground="#000000")
        self.LabelMagnification.configure(highlightbackground="#d9d9d9")
        self.LabelMagnification.configure(highlightcolor="#000000")
        self.LabelMagnification.configure(text='''Magnification                    X''')

        self.LabelGetScale = tk.Label(self.lab53)
        self.LabelGetScale.place(x=60, y=40, height=21, width=116
                , bordermode='ignore')
        self.LabelGetScale.configure(activebackground="#f9f9f9")
        self.LabelGetScale.configure(activeforeground="black")
        self.LabelGetScale.configure(anchor='w')
        self.LabelGetScale.configure(background="#d9d9d9")
        self.LabelGetScale.configure(compound='left')
        self.LabelGetScale.configure(disabledforeground="#a3a3a3")
        self.LabelGetScale.configure(font="-family {Segoe UI} -size 9")
        self.LabelGetScale.configure(foreground="#000000")
        self.LabelGetScale.configure(highlightbackground="#d9d9d9")
        self.LabelGetScale.configure(highlightcolor="#000000")
        self.LabelGetScale.configure(text='''Scale                   (um)''')

        self.EntryMagnification = tk.Entry(self.lab53)
        self.EntryMagnification.place(x=100, y=10, height=20, width=44
                , bordermode='ignore')
        self.EntryMagnification.configure(background="white")
        self.EntryMagnification.configure(disabledforeground="#a3a3a3")
        self.EntryMagnification.configure(font="-family {Courier New} -size 10")
        self.EntryMagnification.configure(foreground="#000000")
        self.EntryMagnification.configure(highlightbackground="#d9d9d9")
        self.EntryMagnification.configure(highlightcolor="#000000")
        self.EntryMagnification.configure(insertbackground="#000000")
        self.EntryMagnification.configure(selectbackground="#c4c4c4")
        self.EntryMagnification.configure(selectforeground="black")

        self.EntryScale = tk.Entry(self.lab53)
        self.EntryScale.place(x=100, y=40, height=20, width=44
                , bordermode='ignore')
        self.EntryScale.configure(background="white")
        self.EntryScale.configure(disabledforeground="#a3a3a3")
        self.EntryScale.configure(font="-family {Courier New} -size 10")
        self.EntryScale.configure(foreground="#000000")
        self.EntryScale.configure(highlightbackground="#d9d9d9")
        self.EntryScale.configure(highlightcolor="#000000")
        self.EntryScale.configure(insertbackground="#000000")
        self.EntryScale.configure(selectbackground="#c4c4c4")
        self.EntryScale.configure(selectforeground="black")
        self.EntryScale_tooltip = \
        ToolTip(self.EntryScale, '''After drawing a straight line over the image, type the value presented on the image.''')

        self.ButtonDataImageClose = tk.Button(self.lab53)
        self.ButtonDataImageClose.place(x=200, y=20, height=34, width=77
                , bordermode='ignore')
        self.ButtonDataImageClose.configure(activebackground="beige")
        self.ButtonDataImageClose.configure(activeforeground="black")
        self.ButtonDataImageClose.configure(background="#d9d9d9")
        self.ButtonDataImageClose.configure(command=gui_main_2_support.conclude_data_image_collect)
        self.ButtonDataImageClose.configure(compound='left')
        self.ButtonDataImageClose.configure(disabledforeground="#a3a3a3")
        self.ButtonDataImageClose.configure(font="-family {Segoe UI} -size 9")
        self.ButtonDataImageClose.configure(foreground="#000000")
        self.ButtonDataImageClose.configure(highlightbackground="#d9d9d9")
        self.ButtonDataImageClose.configure(highlightcolor="#000000")
        self.ButtonDataImageClose.configure(pady="0")
        self.ButtonDataImageClose.configure(text='''OK''')

class TopLevel_MeasuringProcedure:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("440x311+963+465")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(0,  0)
        top.title("Grain Size - ASTM/E112-12")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top = top
        self.Jeffries = tk.StringVar()
        self.Heyns = tk.StringVar()
        self.RB_procedure = tk.IntVar()
        self.boundbox_var = tk.IntVar()
        self.numbergrains_var = tk.IntVar()

        self.fra66 = tk.Frame(self.top)
        self.fra66.place(x=10, y=10, height=255, width=265)
        self.fra66.configure(relief='groove')
        self.fra66.configure(borderwidth="2")
        self.fra66.configure(relief="groove")
        self.fra66.configure(background="#d9d9d9")
        self.fra66.configure(highlightbackground="#d9d9d9")
        self.fra66.configure(highlightcolor="#000000")

        self.fra66_lab73 = tk.Label(self.fra66)
        self.fra66_lab73.place(x=30, y=35, height=21, width=61)
        self.fra66_lab73.configure(activebackground="#d9d9d9")
        self.fra66_lab73.configure(activeforeground="black")
        self.fra66_lab73.configure(anchor='w')
        self.fra66_lab73.configure(background="#d9d9d9")
        self.fra66_lab73.configure(compound='left')
        self.fra66_lab73.configure(disabledforeground="#a3a3a3")
        self.fra66_lab73.configure(font="-family {Segoe UI} -size 9")
        self.fra66_lab73.configure(foreground="#000000")
        self.fra66_lab73.configure(highlightbackground="#d9d9d9")
        self.fra66_lab73.configure(highlightcolor="#000000")
        self.fra66_lab73.configure(text='''Circle area''')

        self.fra66_lab75 = tk.Label(self.fra66)
        self.fra66_lab75.place(x=30, y=95, height=21, width=91)
        self.fra66_lab75.configure(activebackground="#d9d9d9")
        self.fra66_lab75.configure(activeforeground="black")
        self.fra66_lab75.configure(anchor='w')
        self.fra66_lab75.configure(background="#d9d9d9")
        self.fra66_lab75.configure(compound='left')
        self.fra66_lab75.configure(disabledforeground="#a3a3a3")
        self.fra66_lab75.configure(font="-family {Segoe UI} -size 9")
        self.fra66_lab75.configure(foreground="#000000")
        self.fra66_lab75.configure(highlightbackground="#d9d9d9")
        self.fra66_lab75.configure(highlightcolor="#000000")
        self.fra66_lab75.configure(text='''Number of lines''')

        self.RB_JeffriesP = tk.Radiobutton(self.fra66)
        self.RB_JeffriesP.place(x=10, y=10, height=25, width=192)
        self.RB_JeffriesP.configure(activebackground="#d9d9d9")
        self.RB_JeffriesP.configure(activeforeground="black")
        self.RB_JeffriesP.configure(anchor='w')
        self.RB_JeffriesP.configure(background="#d9d9d9")
        self.RB_JeffriesP.configure(compound='left')
        self.RB_JeffriesP.configure(disabledforeground="#a3a3a3")
        self.RB_JeffriesP.configure(font="-family {Segoe UI} -size 9")
        self.RB_JeffriesP.configure(foreground="#000000")
        self.RB_JeffriesP.configure(highlightbackground="#d9d9d9")
        self.RB_JeffriesP.configure(highlightcolor="#000000")
        self.RB_JeffriesP.configure(justify='left')
        self.RB_JeffriesP.configure(text='''Jeffries - Planimetric procedure''')
        self.RB_JeffriesP.configure(textvariable=self.Jeffries)
        self.Jeffries.set('''Jeffries - Planimetric procedure''')
        self.RB_JeffriesP.configure(value='1')
        self.RB_JeffriesP.configure(variable=self.RB_procedure)

        self.fra66_lab77 = tk.Label(self.fra66)
        self.fra66_lab77.place(x=30, y=120, height=21, width=70)
        self.fra66_lab77.configure(activebackground="#d9d9d9")
        self.fra66_lab77.configure(activeforeground="black")
        self.fra66_lab77.configure(anchor='w')
        self.fra66_lab77.configure(background="#d9d9d9")
        self.fra66_lab77.configure(compound='left')
        self.fra66_lab77.configure(disabledforeground="#a3a3a3")
        self.fra66_lab77.configure(font="-family {Segoe UI} -size 9")
        self.fra66_lab77.configure(foreground="#000000")
        self.fra66_lab77.configure(highlightbackground="#d9d9d9")
        self.fra66_lab77.configure(highlightcolor="#000000")
        self.fra66_lab77.configure(text='''Lines length''')

        self.fra66_lab79 = tk.Label(self.fra66)
        self.fra66_lab79.place(x=40, y=190, height=21, width=86)
        self.fra66_lab79.configure(activebackground="#d9d9d9")
        self.fra66_lab79.configure(activeforeground="black")
        self.fra66_lab79.configure(anchor='w')
        self.fra66_lab79.configure(background="#d9d9d9")
        self.fra66_lab79.configure(compound='left')
        self.fra66_lab79.configure(disabledforeground="#a3a3a3")
        self.fra66_lab79.configure(font="-family {Segoe UI} -size 9")
        self.fra66_lab79.configure(foreground="#000000")
        self.fra66_lab79.configure(highlightbackground="#d9d9d9")
        self.fra66_lab79.configure(highlightcolor="#000000")
        self.fra66_lab79.configure(text='''Circle diameter''')

        self.CircunferenceJeffriesArea = tk.Entry(self.fra66)
        self.CircunferenceJeffriesArea.place(x=100, y=35, height=20, width=34)
        self.CircunferenceJeffriesArea.configure(background="white")
        self.CircunferenceJeffriesArea.configure(disabledforeground="#a3a3a3")
        self.CircunferenceJeffriesArea.configure(font="-family {Courier New} -size 10")
        self.CircunferenceJeffriesArea.configure(foreground="#000000")
        self.CircunferenceJeffriesArea.configure(highlightbackground="#d9d9d9")
        self.CircunferenceJeffriesArea.configure(highlightcolor="#000000")
        self.CircunferenceJeffriesArea.configure(insertbackground="#000000")
        self.CircunferenceJeffriesArea.configure(selectbackground="#d9d9d9")
        self.CircunferenceJeffriesArea.configure(selectforeground="black")

        self.NumLinesHeyns = tk.Entry(self.fra66)
        self.NumLinesHeyns.place(x=130, y=95, height=20, width=34)
        self.NumLinesHeyns.configure(background="white")
        self.NumLinesHeyns.configure(disabledforeground="#a3a3a3")
        self.NumLinesHeyns.configure(font="-family {Courier New} -size 10")
        self.NumLinesHeyns.configure(foreground="#000000")
        self.NumLinesHeyns.configure(highlightbackground="#d9d9d9")
        self.NumLinesHeyns.configure(highlightcolor="#000000")
        self.NumLinesHeyns.configure(insertbackground="#000000")
        self.NumLinesHeyns.configure(selectbackground="#d9d9d9")
        self.NumLinesHeyns.configure(selectforeground="black")

        self.LineLength = tk.Entry(self.fra66)
        self.LineLength.place(x=130, y=120, height=20, width=34)
        self.LineLength.configure(background="white")
        self.LineLength.configure(disabledforeground="#a3a3a3")
        self.LineLength.configure(font="-family {Courier New} -size 10")
        self.LineLength.configure(foreground="#000000")
        self.LineLength.configure(highlightbackground="#d9d9d9")
        self.LineLength.configure(highlightcolor="#000000")
        self.LineLength.configure(insertbackground="#000000")
        self.LineLength.configure(selectbackground="#d9d9d9")
        self.LineLength.configure(selectforeground="black")

        self.HilliardCircunferenceDiameterEntry = tk.Entry(self.fra66)
        self.HilliardCircunferenceDiameterEntry.place(x=130, y=190, height=20
                , width=34)
        self.HilliardCircunferenceDiameterEntry.configure(background="white")
        self.HilliardCircunferenceDiameterEntry.configure(disabledforeground="#a3a3a3")
        self.HilliardCircunferenceDiameterEntry.configure(font="-family {Courier New} -size 10")
        self.HilliardCircunferenceDiameterEntry.configure(foreground="#000000")
        self.HilliardCircunferenceDiameterEntry.configure(highlightbackground="#d9d9d9")
        self.HilliardCircunferenceDiameterEntry.configure(highlightcolor="#000000")
        self.HilliardCircunferenceDiameterEntry.configure(insertbackground="#000000")
        self.HilliardCircunferenceDiameterEntry.configure(selectbackground="#d9d9d9")
        self.HilliardCircunferenceDiameterEntry.configure(selectforeground="black")

        self.RB_HeynsP = tk.Radiobutton(self.fra66)
        self.RB_HeynsP.place(x=10, y=70, height=25, width=210)
        self.RB_HeynsP.configure(activebackground="#d9d9d9")
        self.RB_HeynsP.configure(activeforeground="black")
        self.RB_HeynsP.configure(anchor='w')
        self.RB_HeynsP.configure(background="#d9d9d9")
        self.RB_HeynsP.configure(compound='left')
        self.RB_HeynsP.configure(disabledforeground="#a3a3a3")
        self.RB_HeynsP.configure(font="-family {Segoe UI} -size 9")
        self.RB_HeynsP.configure(foreground="#000000")
        self.RB_HeynsP.configure(highlightbackground="#d9d9d9")
        self.RB_HeynsP.configure(highlightcolor="#000000")
        self.RB_HeynsP.configure(justify='left')
        self.RB_HeynsP.configure(text='''Heyns - Lineal Intercept procedure''')
        self.RB_HeynsP.configure(textvariable=self.Heyns)
        self.Heyns.set('''Heyns - Lineal Intercept procedure''')
        self.RB_HeynsP.configure(value='2')
        self.RB_HeynsP.configure(variable=self.RB_procedure)
        self.RB_HeynsP_tooltip = \
        ToolTip(self.RB_HeynsP, '''Intercepting procedure''')

        self.RB_HilliardP = tk.Radiobutton(self.fra66)
        self.RB_HilliardP.place(x=10, y=160, height=25, width=140)
        self.RB_HilliardP.configure(activebackground="#d9d9d9")
        self.RB_HilliardP.configure(activeforeground="black")
        self.RB_HilliardP.configure(anchor='w')
        self.RB_HilliardP.configure(background="#d9d9d9")
        self.RB_HilliardP.configure(compound='left')
        self.RB_HilliardP.configure(disabledforeground="#a3a3a3")
        self.RB_HilliardP.configure(font="-family {Segoe UI} -size 9")
        self.RB_HilliardP.configure(foreground="#000000")
        self.RB_HilliardP.configure(highlightbackground="#d9d9d9")
        self.RB_HilliardP.configure(highlightcolor="#000000")
        self.RB_HilliardP.configure(justify='left')
        self.RB_HilliardP.configure(text='''Hilliard - Single circle''')
        self.RB_HilliardP.configure(value='3')
        self.RB_HilliardP.configure(variable=self.RB_procedure)
        self.RB_HilliardP_tooltip = \
        ToolTip(self.RB_HilliardP, '''Intercepting procedure''')

        self.fra66_rad62 = tk.Radiobutton(self.fra66)
        self.fra66_rad62.place(x=10, y=220, height=25, width=140)
        self.fra66_rad62.configure(activebackground="#d9d9d9")
        self.fra66_rad62.configure(activeforeground="black")
        self.fra66_rad62.configure(anchor='w')
        self.fra66_rad62.configure(background="#d9d9d9")
        self.fra66_rad62.configure(compound='left')
        self.fra66_rad62.configure(disabledforeground="#a3a3a3")
        self.fra66_rad62.configure(font="-family {Segoe UI} -size 9")
        self.fra66_rad62.configure(foreground="#000000")
        self.fra66_rad62.configure(highlightbackground="#d9d9d9")
        self.fra66_rad62.configure(highlightcolor="#000000")
        self.fra66_rad62.configure(justify='left')
        self.fra66_rad62.configure(text='''Abram - Three circles''')
        self.fra66_rad62.configure(value='4')
        self.fra66_rad62.configure(variable=self.RB_procedure)
        self.fra66_rad62_tooltip = \
        ToolTip(self.fra66_rad62, '''Intercepting procedure''')

        self.lab51 = tk.LabelFrame(self.top)
        self.lab51.place(x=280, y=2, height=75, width=150)
        self.lab51.configure(relief='groove')
        self.lab51.configure(font="-family {Segoe UI} -size 9")
        self.lab51.configure(foreground="#000000")
        self.lab51.configure(text='''Display options''')
        self.lab51.configure(background="#d9d9d9")
        self.lab51.configure(highlightbackground="#d9d9d9")
        self.lab51.configure(highlightcolor="#000000")

        self.BoundingBox_CheckBoxButton = tk.Checkbutton(self.lab51)
        self.BoundingBox_CheckBoxButton.place(x=10, y=20, height=25, width=103
                , bordermode='ignore')
        self.BoundingBox_CheckBoxButton.configure(activebackground="#d9d9d9")
        self.BoundingBox_CheckBoxButton.configure(activeforeground="black")
        self.BoundingBox_CheckBoxButton.configure(anchor='w')
        self.BoundingBox_CheckBoxButton.configure(background="#d9d9d9")
        self.BoundingBox_CheckBoxButton.configure(compound='left')
        self.BoundingBox_CheckBoxButton.configure(disabledforeground="#a3a3a3")
        self.BoundingBox_CheckBoxButton.configure(font="-family {Segoe UI} -size 9")
        self.BoundingBox_CheckBoxButton.configure(foreground="#000000")
        self.BoundingBox_CheckBoxButton.configure(highlightbackground="#d9d9d9")
        self.BoundingBox_CheckBoxButton.configure(highlightcolor="#000000")
        self.BoundingBox_CheckBoxButton.configure(justify='left')
        self.BoundingBox_CheckBoxButton.configure(text='''Bounding box''')
        self.BoundingBox_CheckBoxButton.configure(variable=self.boundbox_var)
        self.BoundingBox_CheckBoxButton_tooltip = \
        ToolTip(self.BoundingBox_CheckBoxButton, '''Displays a boundaing box around each grain''')

        self.NumberGrains_CheckBoxButton = tk.Checkbutton(self.lab51)
        self.NumberGrains_CheckBoxButton.place(x=10, y=40, height=25, width=107
                , bordermode='ignore')
        self.NumberGrains_CheckBoxButton.configure(activebackground="#d9d9d9")
        self.NumberGrains_CheckBoxButton.configure(activeforeground="black")
        self.NumberGrains_CheckBoxButton.configure(anchor='w')
        self.NumberGrains_CheckBoxButton.configure(background="#d9d9d9")
        self.NumberGrains_CheckBoxButton.configure(compound='left')
        self.NumberGrains_CheckBoxButton.configure(disabledforeground="#a3a3a3")
        self.NumberGrains_CheckBoxButton.configure(font="-family {Segoe UI} -size 9")
        self.NumberGrains_CheckBoxButton.configure(foreground="#000000")
        self.NumberGrains_CheckBoxButton.configure(highlightbackground="#d9d9d9")
        self.NumberGrains_CheckBoxButton.configure(highlightcolor="#000000")
        self.NumberGrains_CheckBoxButton.configure(justify='left')
        self.NumberGrains_CheckBoxButton.configure(text='''Number grains''')
        self.NumberGrains_CheckBoxButton.configure(variable=self.numbergrains_var)
        self.NumberGrains_CheckBoxButton_tooltip = \
        ToolTip(self.NumberGrains_CheckBoxButton, '''Labels each grain used by the respective procedure''')

        self.ApplyProcudureButton = tk.Button(self.top)
        self.ApplyProcudureButton.place(x=160, y=270, height=34, width=137)
        self.ApplyProcudureButton.configure(activebackground="beige")
        self.ApplyProcudureButton.configure(activeforeground="black")
        self.ApplyProcudureButton.configure(background="#d9d9d9")
        self.ApplyProcudureButton.configure(command=gui_main_2_support.apply_procedure_button)
        self.ApplyProcudureButton.configure(compound='left')
        self.ApplyProcudureButton.configure(disabledforeground="#a3a3a3")
        self.ApplyProcudureButton.configure(font="-family {Segoe UI} -size 9")
        self.ApplyProcudureButton.configure(foreground="#000000")
        self.ApplyProcudureButton.configure(highlightbackground="#d9d9d9")
        self.ApplyProcudureButton.configure(highlightcolor="#000000")
        self.ApplyProcudureButton.configure(pady="0")
        self.ApplyProcudureButton.configure(text='''Apply''')

from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkDefaultFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    gui_main_2_support.main()

if __name__ == '__main__':
    gui_main_2_support.main()




